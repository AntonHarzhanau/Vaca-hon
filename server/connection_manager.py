from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from models.Player import Player
import json
class ConnectionManager:
    
    def __init__(self):
        self.active_connections: dict[WebSocket, int] = {}  # {WebSocket: player_id}
        self.players: dict[int, Player] = {}  # {player_id: Player}
        self.id = 0

    async def connect(self, websocket: WebSocket):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞."""
        await websocket.accept()

        new_player = Player(id=self.id)
        self.players[self.id] = new_player
        self.active_connections[websocket] = self.id
        self.id += 1

        print(f"üîó –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: ID {new_player.id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        await websocket.send_text(json.dumps({
            "action": "player_connected",
            "players": [player.model_dump() for player in self.players.values()]
        }))
        await websocket.send_text(json.dumps({
            "action": "your_id",
            "player_id": new_player.id
        }))

        # –°–æ–æ–±—â–∞–µ–º –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –æ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º –∏–≥—Ä–æ–∫–µ
        new_player_data = json.dumps({
            "action": "player_connected",
            "players": [new_player.model_dump()]
        })
        await self.broadcast(new_player_data, exclude=websocket)

    async def disconnect(self, websocket: WebSocket):
        """–£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –µ–≥–æ ID."""
        if websocket in self.active_connections:
            player_id = self.active_connections.pop(websocket)
            if player_id in self.players:
                del self.players[player_id]
                self.id -= 1
                print(f" –ò–≥—Ä–æ–∫ {player_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –∏ ID –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
                await self.broadcast(json.dumps({
                    "action": "player_disconnected",
                    "player_id": player_id
                }))

    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)

    async def broadcast(self, message: str, exclude: WebSocket = None):
        for connection in self.active_connections:
            if connection != exclude:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
                await connection.send_text(message)