from fastapi import FastAPI, WebSocket, WebSocketDisconnect
import json
import random

app = FastAPI()

connected_clients = []  # –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
token = 0  # –ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
player_id = 0  # ID –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞


def roll_dice():
    """–§—É–Ω–∫—Ü–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤ –∏ —Å–º–µ–Ω—ã –∏–≥—Ä–æ–∫–∞"""
    global token
    dice1 = random.randint(1, 6)
    dice2 = random.randint(1, 6)
    
    if len(connected_clients) > 0:
        token = (token + 1) % len(connected_clients)  # –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞

    return {"action": "roll_dice", "dice1": dice1, "dice2": dice2}


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    global player_id
    global token
    await websocket.accept()

    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ID –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
    client_info = {"ws": websocket, "id": player_id}
    connected_clients.append(client_info)
    print(f"üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ID {player_id}")
    for i in range(len(connected_clients) - 1):
        client_connected_message = json.dumps({"action": "client_connected", "id": connected_clients[i]["id"]})
        await websocket.send_text(client_connected_message)
    # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    client_connected_message = json.dumps({"action": "client_connected", "id": player_id})
    for client in connected_clients:
        await client["ws"].send_text(client_connected_message)

    player_id += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º ID –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞

    try:
        while True:
            message = await websocket.receive_text()
            print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

            data = json.loads(message)
            action = data.get("action")

            if action == "roll_dice":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –±—Ä–æ—Å–∞—Ç—å –∫–æ—Å—Ç–∏ (–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º)
                if websocket == connected_clients[token]["ws"]:
                    print(f"üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤ –æ—Ç {connected_clients[token]['id']}")
                    
                    response = roll_dice()
                    response_json = json.dumps(response)

                    # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–∞
                    for client in connected_clients:
                        await client["ws"].send_text(response_json)

                    # –°–æ–æ–±—â–∞–µ–º –≤—Å–µ–º, —á–µ–π —Ö–æ–¥
                    token_message = json.dumps({"action": "change_token", "token": token})
                    for client in connected_clients:
                        await client["ws"].send_text(token_message)
                else:
                    print(f"‚õî –ò–≥—Ä–æ–∫ {connected_clients[token]['id']} –Ω–µ –º–æ–∂–µ—Ç –±—Ä–æ—Å–∞—Ç—å –∫–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å")
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")

    except WebSocketDisconnect:
        print(f"‚ùå –ö–ª–∏–µ–Ω—Ç {client_info['id']} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
        connected_clients.remove(client_info)  # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —Ö–æ–¥–∞, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏
        if len(connected_clients) > 0 and token >= len(connected_clients):
            token = 0

        # –û–ø–æ–≤–µ—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        for client in connected_clients:
            await client["ws"].send_text(json.dumps({"action": "player_disconnected", "id": client_info["id"]}))

# uvicorn server:app --host 0.0.0.0 --port 8000 --reload
